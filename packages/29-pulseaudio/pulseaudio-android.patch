diff -uNr 32-pulseaudio/include/libintl.h 32-pulseaudio.mod/include/libintl.h
--- 32-pulseaudio/include/libintl.h	1969-12-31 21:00:00.000000000 -0300
+++ 32-pulseaudio.mod/include/libintl.h	2024-03-30 22:04:37.047741358 -0300
@@ -0,0 +1,53 @@
+#ifndef _LIBINTL_H
+#define _LIBINTL_H
+
+#include <errno.h>
+#include <string.h>
+
+static __inline__ char* gettext(const char* msgid)
+{ return (char*) msgid; }
+
+static __inline__ char* dgettext(const char* domainname, const char* msgid)
+{ return (char*) msgid; }
+
+static __inline__ char* dcgettext(const char* domainname, const char* msgid, int category)
+{ return (char*) msgid; }
+
+static __inline__ char* ngettext(const char* msgid1, const char* msgid2, unsigned long int n)
+{ return (char *) ((n == 1) ? msgid1 : msgid2); }
+
+static __inline__ char* dngettext(const char* domainname, const char* msgid1, const char* msgid2, unsigned long int n)
+{ return (char *) ((n == 1) ? msgid1 : msgid2); }
+
+static __inline__ char* dcngettext(const char* domainname, const char* msgid1, const char* msgid2, unsigned long int n, int category)
+{ return (char *) ((n == 1) ? msgid1 : msgid2); }
+
+static __inline__ char* textdomain(const char* domainname)
+{
+	static const char default_str[] = "messages";
+	if (domainname && *domainname && strcmp(domainname, default_str)) {
+		errno = EINVAL;
+		return NULL;
+	}
+	return (char*) default_str;
+}
+
+static __inline__ char* bindtextdomain(const char* domainname, const char* dirname)
+{
+	static const char dir[] = "/";
+	if (!domainname || !*domainname || (dirname && ((dirname[0] != '/') || dirname[1]))) {
+		errno = EINVAL;
+		return NULL;
+	}
+	return (char*) dir;
+}
+
+static __inline__ char* bind_textdomain_codeset(const char* domainname, const char* codeset)
+{
+	if (!domainname || !*domainname || (codeset && strcasecmp(codeset, "UTF-8"))) {
+		errno = EINVAL;
+	}
+	return NULL;
+}
+
+#endif
diff -uNr 32-pulseaudio/meson.build 32-pulseaudio.mod/meson.build
--- 32-pulseaudio/meson.build	2024-03-30 22:05:41.574406510 -0300
+++ 32-pulseaudio.mod/meson.build	2024-03-30 22:05:14.091073822 -0300
@@ -286,10 +286,6 @@
   endif
 endif
 
-if cc.has_header_symbol('pthread.h', 'PTHREAD_PRIO_INHERIT')
-  cdata.set('HAVE_PTHREAD_PRIO_INHERIT', 1)
-endif
-
 # Headers which are usable
 
 check_usable_headers = [
@@ -381,7 +377,7 @@
     libintl_dep = cc.find_library('intl')
   endif
 else
-  libintl_dep = cc.find_library('intl')
+  libintl_dep = []
 endif
 
 # Symbols
@@ -448,6 +444,7 @@
 # Core Dependencies
 
 libm_dep = cc.find_library('m', required : true)
+aaudio_dep = cc.find_library('aaudio', required : true)
 
 thread_dep = dependency('threads')
 foreach f : [
diff -uNr 32-pulseaudio/src/daemon/caps.c 32-pulseaudio.mod/src/daemon/caps.c
--- 32-pulseaudio/src/daemon/caps.c	2024-03-30 22:05:41.597739843 -0300
+++ 32-pulseaudio.mod/src/daemon/caps.c	2024-03-30 22:06:12.721072445 -0300
@@ -36,64 +36,11 @@
 
 #include "caps.h"
 
-/* Glibc <= 2.2 has broken unistd.h */
-#if defined(__linux__) && (__GLIBC__ <= 2 && __GLIBC_MINOR__ <= 2)
-int setresgid(gid_t r, gid_t e, gid_t s);
-int setresuid(uid_t r, uid_t e, uid_t s);
-#endif
-
-/* Drop root rights when called SUID root */
+/* Disable privilege dropping on Android. */
 void pa_drop_root(void) {
-
-#ifdef HAVE_GETUID
-    uid_t uid;
-    gid_t gid;
-
-    pa_log_debug("Cleaning up privileges.");
-    uid = getuid();
-    gid = getgid();
-
-#if defined(HAVE_SETRESUID)
-    pa_assert_se(setresuid(uid, uid, uid) >= 0);
-    pa_assert_se(setresgid(gid, gid, gid) >= 0);
-#elif defined(HAVE_SETREUID)
-    pa_assert_se(setreuid(uid, uid) >= 0);
-    pa_assert_se(setregid(gid, gid) >= 0);
-#else
-    pa_assert_se(setuid(uid) >= 0);
-    pa_assert_se(seteuid(uid) >= 0);
-    pa_assert_se(setgid(gid) >= 0);
-    pa_assert_se(setegid(gid) >= 0);
-#endif
-
-    pa_assert_se(getuid() == uid);
-    pa_assert_se(geteuid() == uid);
-    pa_assert_se(getgid() == gid);
-    pa_assert_se(getegid() == gid);
-
-    if (uid != 0)
-        pa_drop_caps();
-#endif
+    return;
 }
 
 void pa_drop_caps(void) {
-#ifdef HAVE_SYS_CAPABILITY_H
-#if defined(__linux__)
-    cap_t caps;
-    pa_assert_se(caps = cap_init());
-    pa_assert_se(cap_clear(caps) == 0);
-    pa_assert_se(cap_set_proc(caps) == 0);
-    pa_assert_se(cap_free(caps) == 0);
-#elif defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
-    /* FreeBSD doesn't have this functionality, even though sys/capability.h is
-     * available. See https://bugs.freedesktop.org/show_bug.cgi?id=72580 */
-    pa_log_warn("FreeBSD cannot drop extra capabilities, implementation needed.");
-#else
-#error "Don't know how to do capabilities on your system.  Please send a patch."
-#endif /* __linux__ */
-#else /* HAVE_SYS_CAPABILITY_H */
-    pa_log_warn("Normally all extra capabilities would be dropped now, but "
-                "that's impossible because PulseAudio was built without "
-                "capabilities support.");
-#endif
+    return;
 }
diff -uNr 32-pulseaudio/src/daemon/main.c 32-pulseaudio.mod/src/daemon/main.c
--- 32-pulseaudio/src/daemon/main.c	2024-03-30 22:05:41.597739843 -0300
+++ 32-pulseaudio.mod/src/daemon/main.c	2024-03-30 22:06:12.697739112 -0300
@@ -163,206 +163,11 @@
 }
 
 
-#if defined(OS_IS_WIN32)
-
+// Disable privilege dropping on Android.
 static int change_user(void) {
-    pa_log_info("Overriding system runtime/config base dir to '%s'.", pa_win32_get_system_appdata());
-
-    /* On other platforms, these paths are compiled into PulseAudio. This isn't
-     * suitable on Windows. Firstly, Windows doesn't follow the FHS or use Unix
-     * paths and the build system can't handle Windows-style paths properly.
-     * Secondly, the idiomatic location for a service's state and shared data is
-     * ProgramData, and the location of special folders is dynamic on Windows.
-     * Also, this method of handling paths is consistent with how they are
-     * handled on Windows in other parts of PA. Note that this is only needed
-     * in system-wide mode since paths in user instances are already handled
-     * properly.
-     */
-
-    char *run_path = pa_sprintf_malloc("%s" PA_PATH_SEP "run", pa_win32_get_system_appdata());
-    char *lib_path = pa_sprintf_malloc("%s" PA_PATH_SEP "lib", pa_win32_get_system_appdata());
-
-    /* https://docs.microsoft.com/en-us/windows/win32/secauthz/ace-strings */
-    /* https://docs.microsoft.com/en-us/windows/win32/secauthz/modifying-the-acls-of-an-object-in-c-- */
-    /* https://docs.microsoft.com/en-us/windows/win32/api/sddl/nf-sddl-convertstringsecuritydescriptortosecuritydescriptora */
-    {
-        mkdir(run_path);
-        PSECURITY_DESCRIPTOR sd;
-        if (ConvertStringSecurityDescriptorToSecurityDescriptorA(
-            "D:PAI"                   /* DACL, disable inheritance from parent, enable propagation to children */
-            "(A;OICI;FA;;;SY)"        /* give system full access */
-            "(A;OICI;FA;;;CO)"        /* give owner full access */
-            "(A;OICI;FA;;;BA)"        /* give administrators full access */
-            "(A;OICI;0x1200a9;;;WD)", /* give everyone read/write/execute access */
-            SDDL_REVISION_1, &sd, NULL
-        )) {
-            PACL acl;
-            BOOL acl_present, acl_default;
-            if (GetSecurityDescriptorDacl(sd, &acl_present, &acl, &acl_default)) {
-                if (SetNamedSecurityInfo(run_path, SE_FILE_OBJECT, DACL_SECURITY_INFORMATION | PROTECTED_DACL_SECURITY_INFORMATION, NULL, NULL, acl, NULL) != ERROR_SUCCESS) {
-                    pa_log_warn("Failed to set DACL for runtime dir: failed to apply DACL: error %lu.", GetLastError());
-                }
-                LocalFree(acl);
-            } else {
-                pa_log_warn("Failed to set DACL for runtime dir: failed to get security descriptor DACL: error %lu.", GetLastError());
-            }
-        } else {
-            pa_log_warn("Failed to set DACL for runtime dir: failed to parse security descriptor: error %lu.", GetLastError());
-        }
-    }
-    {
-        mkdir(lib_path);
-        PSECURITY_DESCRIPTOR sd;
-        if (ConvertStringSecurityDescriptorToSecurityDescriptorA(
-            "D:PAI"             /* DACL, disable inheritance from parent, enable propagation to children */
-            "(A;OICI;FA;;;SY)"  /* give system full access */
-            "(A;OICI;FA;;;CO)"  /* give owner full access */
-            "(A;OICI;FA;;;BA)", /* give administrators full access */
-            SDDL_REVISION_1, &sd, NULL
-        )) {
-            PACL acl;
-            BOOL acl_present, acl_default;
-            if (GetSecurityDescriptorDacl(sd, &acl_present, &acl, &acl_default)) {
-                if (SetNamedSecurityInfo(lib_path, SE_FILE_OBJECT, DACL_SECURITY_INFORMATION | PROTECTED_DACL_SECURITY_INFORMATION, NULL, NULL, acl, NULL) != ERROR_SUCCESS) {
-                    pa_log_warn("Failed to set DACL for lib dir: failed to apply DACL: error %lu.", GetLastError());
-                }
-                LocalFree(acl);
-            } else {
-                pa_log_warn("Failed to set DACL for lib dir: failed to get security descriptor DACL: error %lu.", GetLastError());
-            }
-        } else {
-            pa_log_warn("Failed to set DACL for lib dir: failed to parse security descriptor: error %lu.", GetLastError());
-        }
-    }
-
-    pa_set_env("HOME", run_path);
-    if (!getenv("PULSE_RUNTIME_PATH"))
-        pa_set_env("PULSE_RUNTIME_PATH", run_path);
-    if (!getenv("PULSE_CONFIG_PATH"))
-        pa_set_env("PULSE_CONFIG_PATH", lib_path);
-    if (!getenv("PULSE_STATE_PATH"))
-        pa_set_env("PULSE_STATE_PATH", lib_path);
-
-    pa_xfree(run_path);
-    pa_xfree(lib_path);
-
-    pa_log_info("Not changing user for system instance on Windows.");
-    return 0;
-}
-
-#elif defined(HAVE_PWD_H) && defined(HAVE_GRP_H)
-
-static int change_user(void) {
-    struct passwd *pw;
-    struct group * gr;
-    int r;
-
-    /* This function is called only in system-wide mode. It creates a
-     * runtime dir in /var/run/ with proper UID/GID and drops privs
-     * afterwards. */
-
-    if (!(pw = getpwnam(PA_SYSTEM_USER))) {
-        pa_log(_("Failed to find user '%s'."), PA_SYSTEM_USER);
-        return -1;
-    }
-
-    if (!(gr = getgrnam(PA_SYSTEM_GROUP))) {
-        pa_log(_("Failed to find group '%s'."), PA_SYSTEM_GROUP);
-        return -1;
-    }
-
-    pa_log_info("Found user '%s' (UID %lu) and group '%s' (GID %lu).",
-                PA_SYSTEM_USER, (unsigned long) pw->pw_uid,
-                PA_SYSTEM_GROUP, (unsigned long) gr->gr_gid);
-
-    if (pw->pw_gid != gr->gr_gid) {
-        pa_log(_("GID of user '%s' and of group '%s' don't match."), PA_SYSTEM_USER, PA_SYSTEM_GROUP);
-        return -1;
-    }
-
-    if (!pa_streq(pw->pw_dir, PA_SYSTEM_RUNTIME_PATH))
-        pa_log_warn(_("Home directory of user '%s' is not '%s', ignoring."), PA_SYSTEM_USER, PA_SYSTEM_RUNTIME_PATH);
-
-    if (pa_make_secure_dir(PA_SYSTEM_RUNTIME_PATH, 0755, pw->pw_uid, gr->gr_gid, true) < 0) {
-        pa_log(_("Failed to create '%s': %s"), PA_SYSTEM_RUNTIME_PATH, pa_cstrerror(errno));
-        return -1;
-    }
-
-    if (pa_make_secure_dir(PA_SYSTEM_STATE_PATH, 0700, pw->pw_uid, gr->gr_gid, true) < 0) {
-        pa_log(_("Failed to create '%s': %s"), PA_SYSTEM_STATE_PATH, pa_cstrerror(errno));
-        return -1;
-    }
-
-    /* We don't create the config dir here, because we don't need to write to it */
-
-    if (initgroups(PA_SYSTEM_USER, gr->gr_gid) != 0) {
-        pa_log(_("Failed to change group list: %s"), pa_cstrerror(errno));
-        return -1;
-    }
-
-#if defined(HAVE_SETRESGID)
-    r = setresgid(gr->gr_gid, gr->gr_gid, gr->gr_gid);
-#elif defined(HAVE_SETEGID)
-    if ((r = setgid(gr->gr_gid)) >= 0)
-        r = setegid(gr->gr_gid);
-#elif defined(HAVE_SETREGID)
-    r = setregid(gr->gr_gid, gr->gr_gid);
-#else
-#error "No API to drop privileges"
-#endif
-
-    if (r < 0) {
-        pa_log(_("Failed to change GID: %s"), pa_cstrerror(errno));
-        return -1;
-    }
-
-#if defined(HAVE_SETRESUID)
-    r = setresuid(pw->pw_uid, pw->pw_uid, pw->pw_uid);
-#elif defined(HAVE_SETEUID)
-    if ((r = setuid(pw->pw_uid)) >= 0)
-        r = seteuid(pw->pw_uid);
-#elif defined(HAVE_SETREUID)
-    r = setreuid(pw->pw_uid, pw->pw_uid);
-#else
-#error "No API to drop privileges"
-#endif
-
-    if (r < 0) {
-        pa_log(_("Failed to change UID: %s"), pa_cstrerror(errno));
-        return -1;
-    }
-
-    pa_drop_caps();
-
-    pa_set_env("USER", PA_SYSTEM_USER);
-    pa_set_env("USERNAME", PA_SYSTEM_USER);
-    pa_set_env("LOGNAME", PA_SYSTEM_USER);
-    pa_set_env("HOME", PA_SYSTEM_RUNTIME_PATH);
-
-    /* Relevant for pa_runtime_path() */
-    if (!getenv("PULSE_RUNTIME_PATH"))
-        pa_set_env("PULSE_RUNTIME_PATH", PA_SYSTEM_RUNTIME_PATH);
-
-    if (!getenv("PULSE_CONFIG_PATH"))
-        pa_set_env("PULSE_CONFIG_PATH", PA_SYSTEM_CONFIG_PATH);
-
-    if (!getenv("PULSE_STATE_PATH"))
-        pa_set_env("PULSE_STATE_PATH", PA_SYSTEM_STATE_PATH);
-
-    pa_log_info("Successfully changed user to \"" PA_SYSTEM_USER "\".");
-
     return 0;
 }
 
-#else /* HAVE_PWD_H && HAVE_GRP_H */
-
-static int change_user(void) {
-    pa_log(_("System wide mode unsupported on this platform."));
-    return -1;
-}
-
-#endif /* HAVE_PWD_H && HAVE_GRP_H */
-
 #ifdef HAVE_SYS_RESOURCE_H
 
 static int set_one_rlimit(const pa_rlimit *r, int resource, const char *name) {
diff -uNr 32-pulseaudio/src/modules/aaudio/module-aaudio-sink.c 32-pulseaudio.mod/src/modules/aaudio/module-aaudio-sink.c
--- 32-pulseaudio/src/modules/aaudio/module-aaudio-sink.c	1969-12-31 21:00:00.000000000 -0300
+++ 32-pulseaudio.mod/src/modules/aaudio/module-aaudio-sink.c	2024-03-30 22:06:13.167739101 -0300
@@ -0,0 +1,450 @@
+/***
+  This file is part of PulseAudio.
+
+  Copyright 2004-2008 Lennart Poettering
+
+  PulseAudio is free software; you can redistribute it and/or modify
+  it under the terms of the GNU Lesser General Public License as published
+  by the Free Software Foundation; either version 2.1 of the License,
+  or (at your option) any later version.
+
+  PulseAudio is distributed in the hope that it will be useful, but
+  WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+  General Public License for more details.
+
+  You should have received a copy of the GNU Lesser General Public License
+  along with PulseAudio; if not, see <http://www.gnu.org/licenses/>.
+***/
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <errno.h>
+#include <unistd.h>
+
+#include <pulse/rtclock.h>
+#include <pulse/timeval.h>
+#include <pulse/xmalloc.h>
+
+#include <pulsecore/i18n.h>
+#include <pulsecore/macro.h>
+#include <pulsecore/sink.h>
+#include <pulsecore/module.h>
+#include <pulsecore/core-util.h>
+#include <pulsecore/modargs.h>
+#include <pulsecore/log.h>
+#include <pulsecore/thread.h>
+#include <pulsecore/thread-mq.h>
+#include <pulsecore/rtpoll.h>
+
+#include <android/versioning.h>
+#undef __INTRODUCED_IN
+#define __INTRODUCED_IN(api_level)
+#include <aaudio/AAudio.h>
+
+PA_MODULE_AUTHOR("Tom Yan");
+PA_MODULE_DESCRIPTION("Android AAudio sink");
+PA_MODULE_VERSION(PACKAGE_VERSION);
+PA_MODULE_LOAD_ONCE(false);
+PA_MODULE_USAGE(
+    "sink_name=<name for the sink> "
+    "sink_properties=<properties for the sink> "
+    "rate=<sampling rate> "
+    "latency=<buffer length> "
+    "pm=<performance mode> "
+    "no_close_hack=<avoid segfault caused by AAudioStream_close()> "
+);
+
+#define DEFAULT_SINK_NAME "AAudio sink"
+
+enum {
+    SINK_MESSAGE_RENDER = PA_SINK_MESSAGE_MAX,
+    SINK_MESSAGE_OPEN_STREAM
+};
+
+struct userdata {
+    pa_core *core;
+    pa_module *module;
+    pa_sink *sink;
+
+    pa_thread *thread;
+    pa_thread_mq thread_mq;
+    pa_rtpoll *rtpoll;
+    pa_rtpoll_item *rtpoll_item;
+    pa_asyncmsgq *aaudio_msgq;
+
+    uint32_t rate;
+    uint32_t latency;
+    uint32_t pm;
+    bool no_close;
+
+    pa_memchunk memchunk;
+    size_t frame_size;
+
+    AAudioStreamBuilder *builder;
+    AAudioStream *stream;
+    pa_sample_spec ss;
+};
+
+static const char* const valid_modargs[] = {
+    "sink_name",
+    "sink_properties",
+    "rate",
+    "latency",
+    "pm",
+    "no_close_hack",
+    NULL
+};
+
+static int process_render(struct userdata *u, void *audioData, int64_t numFrames) {
+    pa_assert(u->sink->thread_info.state != PA_SINK_INIT);
+
+    /* a render message could be queued after a set state message */
+    if (!PA_SINK_IS_LINKED(u->sink->thread_info.state))
+        return AAUDIO_CALLBACK_RESULT_STOP;
+
+    u->memchunk.memblock = pa_memblock_new_fixed(u->core->mempool, audioData, u->frame_size * numFrames, false);
+    u->memchunk.length = pa_memblock_get_length(u->memchunk.memblock);
+    pa_sink_render_into_full(u->sink, &u->memchunk);
+    pa_memblock_unref_fixed(u->memchunk.memblock);
+
+    return AAUDIO_CALLBACK_RESULT_CONTINUE;
+}
+
+static aaudio_data_callback_result_t data_callback(AAudioStream *stream, void *userdata, void *audioData, int32_t numFrames) {
+    struct userdata* u = userdata;
+
+    pa_assert(u);
+
+    return pa_asyncmsgq_send(u->aaudio_msgq, PA_MSGOBJECT(u->sink), SINK_MESSAGE_RENDER, audioData, numFrames, NULL);
+}
+
+static void error_callback(AAudioStream *stream, void *userdata, aaudio_result_t error) {
+    struct userdata* u = userdata;
+
+    pa_assert(u);
+
+    while (u->sink->state == PA_SINK_INIT);
+
+    if (error != AAUDIO_ERROR_DISCONNECTED)
+        pa_log_debug("AAudio error: %d", error);
+
+    pa_sink_suspend(u->sink, true, PA_SUSPEND_UNAVAILABLE);
+    pa_sink_suspend(u->sink, false, PA_SUSPEND_UNAVAILABLE);
+}
+
+#define CHK(stmt) { \
+    aaudio_result_t res = stmt; \
+    if (res != AAUDIO_OK) { \
+        fprintf(stderr, "error %d at %s:%d\n", res, __FILE__, __LINE__); \
+        goto fail; \
+    } \
+}
+
+static int pa_open_aaudio_stream(struct userdata *u)
+{
+    bool want_float;
+    aaudio_format_t format;
+    pa_sample_spec *ss = &u->ss;
+
+    CHK(AAudio_createStreamBuilder(&u->builder));
+    AAudioStreamBuilder_setPerformanceMode(u->builder, AAUDIO_PERFORMANCE_MODE_NONE + u->pm);
+    AAudioStreamBuilder_setDataCallback(u->builder, data_callback, u);
+    AAudioStreamBuilder_setErrorCallback(u->builder, error_callback, u);
+
+    want_float = ss->format > PA_SAMPLE_S16BE;
+    ss->format = want_float ? PA_SAMPLE_FLOAT32LE : PA_SAMPLE_S16LE;
+    format = want_float ? AAUDIO_FORMAT_PCM_FLOAT : AAUDIO_FORMAT_PCM_I16;
+    AAudioStreamBuilder_setFormat(u->builder, format);
+
+    if (u->rate)
+        AAudioStreamBuilder_setSampleRate(u->builder, u->rate);
+
+    AAudioStreamBuilder_setChannelCount(u->builder, ss->channels);
+
+    CHK(AAudioStreamBuilder_openStream(u->builder, &u->stream));
+    CHK(AAudioStreamBuilder_delete(u->builder));
+
+    ss->rate = AAudioStream_getSampleRate(u->stream);
+    u->frame_size = pa_frame_size(ss);
+
+    return 0;
+
+fail:
+    return -1;
+}
+
+#undef CHK
+
+static pa_usec_t get_latency(struct userdata *u) {
+    if(!u->latency) {
+        return PA_USEC_PER_SEC * AAudioStream_getBufferSizeInFrames(u->stream) / u->ss.rate / 2;
+    } else {
+        return PA_USEC_PER_MSEC * u->latency;
+    }
+}
+
+static int sink_process_msg(pa_msgobject *o, int code, void *data, int64_t offset, pa_memchunk *memchunk) {
+    struct userdata* u = PA_SINK(o)->userdata;
+
+    pa_assert(u);
+
+    switch (code) {
+        case SINK_MESSAGE_RENDER:
+            return process_render(u, data, offset);
+        case SINK_MESSAGE_OPEN_STREAM:
+            if (pa_open_aaudio_stream(u) < 0) {
+                pa_log("pa_open_aaudio_stream() failed.");
+                return -1;
+            }
+            code = PA_SINK_MESSAGE_SET_FIXED_LATENCY;
+            offset = get_latency(u);
+            break;
+    }
+
+    return pa_sink_process_msg(o, code, data, offset, memchunk);
+};
+
+static int state_func_main(pa_sink *s, pa_sink_state_t state, pa_suspend_cause_t suspend_cause) {
+    struct userdata *u = s->userdata;
+    uint32_t idx;
+    pa_sink_input *i;
+    pa_idxset *inputs;
+
+    if (s->state == PA_SINK_SUSPENDED && PA_SINK_IS_OPENED(state)) {
+        if (pa_asyncmsgq_send(u->aaudio_msgq, PA_MSGOBJECT(u->sink), SINK_MESSAGE_OPEN_STREAM, NULL, 0, NULL) < 0)
+            return -1;
+
+        inputs = pa_idxset_copy(s->inputs, NULL);
+        PA_IDXSET_FOREACH(i, inputs, idx) {
+            if (i->state == PA_SINK_INPUT_RUNNING) {
+                pa_sink_input_cork(i, true);
+            } else {
+                pa_idxset_remove_by_index(inputs, idx);
+            }
+        }
+
+        s->alternate_sample_rate = u->ss.rate;
+        pa_sink_reconfigure(s, &u->ss, false);
+        s->default_sample_rate = u->ss.rate;
+
+        /* Avoid infinite loop triggered if uncork in this case */
+        if (s->suspend_cause == PA_SUSPEND_IDLE)
+            pa_sink_suspend(u->sink, true, PA_SUSPEND_UNAVAILABLE);
+
+        PA_IDXSET_FOREACH(i, inputs, idx) pa_sink_input_cork(i, false);
+        pa_idxset_free(inputs, NULL);
+    }
+    return 0;
+}
+
+static int state_func_io(pa_sink *s, pa_sink_state_t state, pa_suspend_cause_t suspend_cause) {
+    struct userdata *u = s->userdata;
+
+    if (PA_SINK_IS_OPENED(s->thread_info.state) &&
+        (state == PA_SINK_SUSPENDED || state == PA_SINK_UNLINKED)) {
+        if (!u->no_close)
+            AAudioStream_close(u->stream);
+        else
+            AAudioStream_requestStop(u->stream);
+    } else if (s->thread_info.state == PA_SINK_SUSPENDED && PA_SINK_IS_OPENED(state)) {
+        if (AAudioStream_requestStart(u->stream) < 0)
+            pa_log("AAudioStream_requestStart() failed.");
+    } else if (s->thread_info.state == PA_SINK_INIT && PA_SINK_IS_LINKED(state)) {
+        if (PA_SINK_IS_OPENED(state)) {
+            if (AAudioStream_requestStart(u->stream) < 0)
+                pa_log("AAudioStream_requestStart() failed.");
+        } else {
+            if (!u->no_close)
+                AAudioStream_close(u->stream);
+        }
+    }
+    return 0;
+}
+
+static void reconfigure_func(pa_sink *s, pa_sample_spec *ss, bool passthrough) {
+    s->sample_spec.rate = ss->rate;
+}
+
+static void thread_func(void *userdata) {
+    struct userdata *u = userdata;
+
+    pa_assert(u);
+
+    pa_log_debug("Thread starting up");
+    pa_thread_mq_install(&u->thread_mq);
+
+    for (;;) {
+        int ret;
+
+        if (PA_UNLIKELY(u->sink->thread_info.rewind_requested))
+          pa_sink_process_rewind(u->sink, 0);
+
+        if ((ret = pa_rtpoll_run(u->rtpoll)) < 0)
+            goto fail;
+
+        if (ret == 0)
+            goto finish;
+    }
+
+fail:
+    /* If this was no regular exit from the loop we have to continue
+     * processing messages until we received PA_MESSAGE_SHUTDOWN */
+    pa_asyncmsgq_post(u->thread_mq.outq, PA_MSGOBJECT(u->core), PA_CORE_MESSAGE_UNLOAD_MODULE, u->module, 0, NULL, NULL);
+    pa_asyncmsgq_wait_for(u->thread_mq.inq, PA_MESSAGE_SHUTDOWN);
+
+finish:
+    pa_log_debug("Thread shutting down");
+}
+
+int pa__init(pa_module*m) {
+    struct userdata *u = NULL;
+    pa_channel_map map;
+    pa_modargs *ma = NULL;
+    pa_sink_new_data data;
+
+    pa_assert(m);
+
+    m->userdata = u = pa_xnew0(struct userdata, 1);
+
+    u->core = m->core;
+    u->module = m;
+    u->rtpoll = pa_rtpoll_new();
+
+    if (pa_thread_mq_init(&u->thread_mq, m->core->mainloop, u->rtpoll) < 0) {
+        pa_log("pa_thread_mq_init() failed.");
+        goto fail;
+    }
+
+    /* The queue linking the AudioTrack thread and our RT thread */
+    u->aaudio_msgq = pa_asyncmsgq_new(0);
+    if (!u->aaudio_msgq) {
+        pa_log("pa_asyncmsgq_new() failed.");
+        goto fail;
+    }
+
+    /* The msgq from the AudioTrack RT thread should have an even higher
+     * priority than the normal message queues, to match the guarantee
+     * all other drivers make: supplying the audio device with data is
+     * the top priority -- and as long as that is possible we don't do
+     * anything else */
+    u->rtpoll_item = pa_rtpoll_item_new_asyncmsgq_read(u->rtpoll, PA_RTPOLL_EARLY-1, u->aaudio_msgq);
+
+    if (!(ma = pa_modargs_new(m->argument, valid_modargs))) {
+        pa_log("Failed to parse module arguments.");
+        goto fail;
+    }
+
+    u->ss = m->core->default_sample_spec;
+    map = m->core->default_channel_map;
+    pa_modargs_get_sample_rate(ma, &u->rate);
+
+    pa_modargs_get_value_u32(ma, "latency", &u->latency);
+
+    u->pm = AAUDIO_PERFORMANCE_MODE_LOW_LATENCY - AAUDIO_PERFORMANCE_MODE_NONE;
+    pa_modargs_get_value_u32(ma, "pm", &u->pm);
+
+    pa_modargs_get_value_boolean(ma, "no_close_hack", &u->no_close);
+
+    if (pa_open_aaudio_stream(u) < 0)
+        goto fail;
+
+    pa_sink_new_data_init(&data);
+    data.driver = __FILE__;
+    data.module = m;
+    pa_sink_new_data_set_name(&data, pa_modargs_get_value(ma, "sink_name", DEFAULT_SINK_NAME));
+    pa_sink_new_data_set_sample_spec(&data, &u->ss);
+    pa_sink_new_data_set_alternate_sample_rate(&data, u->ss.rate);
+    pa_sink_new_data_set_channel_map(&data, &map);
+    pa_proplist_sets(data.proplist, PA_PROP_DEVICE_DESCRIPTION, _("AAudio Output"));
+    pa_proplist_sets(data.proplist, PA_PROP_DEVICE_CLASS, "abstract");
+
+    if (pa_modargs_get_proplist(ma, "sink_properties", data.proplist, PA_UPDATE_REPLACE) < 0) {
+        pa_log("Invalid properties");
+        pa_sink_new_data_done(&data);
+        goto fail;
+    }
+
+    u->sink = pa_sink_new(m->core, &data, 0);
+    pa_sink_new_data_done(&data);
+
+    if (!u->sink) {
+        pa_log("Failed to create sink object.");
+        goto fail;
+    }
+
+    u->sink->parent.process_msg = sink_process_msg;
+    u->sink->set_state_in_main_thread = state_func_main;
+    u->sink->set_state_in_io_thread = state_func_io;
+    u->sink->reconfigure = reconfigure_func;
+    u->sink->userdata = u;
+
+    pa_sink_set_asyncmsgq(u->sink, u->thread_mq.inq);
+    pa_sink_set_rtpoll(u->sink, u->rtpoll);
+    pa_sink_set_fixed_latency(u->sink, get_latency(u));
+
+    if (!(u->thread = pa_thread_new("aaudio-sink", thread_func, u))) {
+        pa_log("Failed to create thread.");
+        goto fail;
+    }
+
+    pa_sink_put(u->sink);
+
+    pa_modargs_free(ma);
+
+    return 0;
+
+fail:
+    if (ma)
+        pa_modargs_free(ma);
+
+    pa__done(m);
+
+    return -1;
+}
+
+int pa__get_n_used(pa_module *m) {
+    struct userdata *u;
+
+    pa_assert(m);
+    pa_assert_se(u = m->userdata);
+
+    return pa_sink_linked_by(u->sink);
+}
+
+void pa__done(pa_module*m) {
+    struct userdata *u;
+
+    pa_assert(m);
+
+    if (!(u = m->userdata))
+        return;
+
+    if (u->sink)
+        pa_sink_unlink(u->sink);
+
+    if (u->thread) {
+        pa_asyncmsgq_send(u->thread_mq.inq, NULL, PA_MESSAGE_SHUTDOWN, NULL, 0, NULL);
+        pa_thread_free(u->thread);
+    }
+
+    pa_thread_mq_done(&u->thread_mq);
+
+    if (u->sink)
+        pa_sink_unref(u->sink);
+
+    if (u->rtpoll_item)
+        pa_rtpoll_item_free(u->rtpoll_item);
+
+    if (u->aaudio_msgq)
+        pa_asyncmsgq_unref(u->aaudio_msgq);
+
+    if (u->rtpoll)
+        pa_rtpoll_free(u->rtpoll);
+
+    pa_xfree(u);
+}
diff -uNr 32-pulseaudio/src/modules/echo-cancel/module-echo-cancel.c 32-pulseaudio.mod/src/modules/echo-cancel/module-echo-cancel.c
--- 32-pulseaudio/src/modules/echo-cancel/module-echo-cancel.c	2024-03-30 22:05:41.611073176 -0300
+++ 32-pulseaudio.mod/src/modules/echo-cancel/module-echo-cancel.c	2024-03-30 22:06:13.244405766 -0300
@@ -2067,18 +2067,18 @@
     }
 
     if (u->save_aec) {
-        pa_log("Creating AEC files in /tmp");
-        u->captured_file = fopen("/tmp/aec_rec.sw", "wb");
+        pa_log("Creating AEC files in /data/data/com.termux/files/usr/tmp");
+        u->captured_file = fopen("/data/data/com.termux/files/usr/tmp/aec_rec.sw", "wb");
         if (u->captured_file == NULL)
             perror ("fopen failed");
-        u->played_file = fopen("/tmp/aec_play.sw", "wb");
+        u->played_file = fopen("/data/data/com.termux/files/usr/tmp/aec_play.sw", "wb");
         if (u->played_file == NULL)
             perror ("fopen failed");
-        u->canceled_file = fopen("/tmp/aec_out.sw", "wb");
+        u->canceled_file = fopen("/data/data/com.termux/files/usr/tmp/aec_out.sw", "wb");
         if (u->canceled_file == NULL)
             perror ("fopen failed");
         if (u->ec->params.drift_compensation) {
-            u->drift_file = fopen("/tmp/aec_drift.txt", "w");
+            u->drift_file = fopen("/data/data/com.termux/files/usr/tmp/aec_drift.txt", "w");
             if (u->drift_file == NULL)
                 perror ("fopen failed");
         }
diff -uNr 32-pulseaudio/src/modules/meson.build 32-pulseaudio.mod/src/modules/meson.build
--- 32-pulseaudio/src/modules/meson.build	2024-03-30 22:05:41.611073176 -0300
+++ 32-pulseaudio.mod/src/modules/meson.build	2024-03-30 22:06:13.154405768 -0300
@@ -58,6 +58,7 @@
   [ 'module-virtual-sink', 'module-virtual-sink.c' ],
   [ 'module-virtual-source', 'module-virtual-source.c' ],
   [ 'module-volume-restore', 'module-volume-restore.c' ],
+  [ 'module-aaudio-sink', 'aaudio/module-aaudio-sink.c', [], [], [aaudio_dep] ],
 ]
 
 if host_machine.system() == 'windows'
diff -uNr 32-pulseaudio/src/modules/module-pipe-source.c 32-pulseaudio.mod/src/modules/module-pipe-source.c
--- 32-pulseaudio/src/modules/module-pipe-source.c	2024-03-30 22:05:41.617739842 -0300
+++ 32-pulseaudio.mod/src/modules/module-pipe-source.c	2024-03-30 22:06:13.881072417 -0300
@@ -59,7 +59,7 @@
         "channels=<number of channels> "
         "channel_map=<channel map>");
 
-#define DEFAULT_FILE_NAME "/tmp/music.input"
+#define DEFAULT_FILE_NAME "/data/data/com.termux/files/usr/tmp/music.input"
 #define DEFAULT_SOURCE_NAME "fifo_input"
 
 struct userdata {
diff -uNr 32-pulseaudio/src/modules/module-protocol-stub.c 32-pulseaudio.mod/src/modules/module-protocol-stub.c
--- 32-pulseaudio/src/modules/module-protocol-stub.c	2024-03-30 22:05:41.617739842 -0300
+++ 32-pulseaudio.mod/src/modules/module-protocol-stub.c	2024-03-30 22:06:13.404405762 -0300
@@ -303,13 +303,13 @@
     /* Windows doesn't support getuid(), so we ignore the per-user Esound socket compile flag.
      * Moreover, Esound Unix sockets haven't been supported on Windows historically. */
 #    if defined(USE_PER_USER_ESOUND_SOCKET) && !defined(OS_IS_WIN32)
-    u->socket_path = pa_sprintf_malloc("/tmp/.esd-%lu/socket", (unsigned long) getuid());
+    u->socket_path = pa_sprintf_malloc("/data/data/com.termux/files/usr/tmp/.esd-%lu/socket", (unsigned long) getuid());
 #    else
-    u->socket_path = pa_xstrdup("/tmp/.esd/socket");
+    u->socket_path = pa_xstrdup("/data/data/com.termux/files/usr/tmp/.esd/socket");
 #    endif
 
     /* This socket doesn't reside in our own runtime dir but in
-     * /tmp/.esd/, hence we have to create the dir first */
+     * /data/data/com.termux/files/usr/tmp/.esd/, hence we have to create the dir first */
 
     if (pa_make_secure_parent_dir(u->socket_path, pa_in_system_mode() ? 0755U : 0700U, (uid_t)-1, (gid_t)-1, false) < 0) {
         pa_log("Failed to create socket directory '%s': %s\n", u->socket_path, pa_cstrerror(errno));
diff -uNr 32-pulseaudio/src/pulsecore/core-util.c 32-pulseaudio.mod/src/pulsecore/core-util.c
--- 32-pulseaudio/src/pulsecore/core-util.c	2024-03-30 22:05:41.637739841 -0300
+++ 32-pulseaudio.mod/src/pulsecore/core-util.c	2024-03-30 22:06:11.951072463 -0300
@@ -1766,7 +1766,7 @@
      * users, too. Since we need POSIX locking and UNIX sockets in
      * this directory, we try XDG_RUNTIME_DIR first, and if that isn't
      * set create a directory in $HOME and link it to a random subdir
-     * in /tmp, if it was not explicitly configured. */
+     * in /data/data/com.termux/files/usr/tmp, if it was not explicitly configured. */
 
     m = pa_in_system_mode() ? 0755U : 0700U;
 
@@ -1839,7 +1839,7 @@
 
 #ifdef HAVE_SYMLINK
             /* Hmm, so the runtime directory didn't exist yet, so let's
-             * create one in /tmp and symlink that to it */
+             * create one in /data/data/com.termux/files/usr/tmp and symlink that to it */
 
             if (make_random_dir_and_link(0700, k) < 0) {
 
@@ -3229,8 +3229,8 @@
     if ((f = pa_fopen_cloexec(PA_MACHINE_ID, "r")) ||
         (f = pa_fopen_cloexec(PA_MACHINE_ID_FALLBACK, "r")) ||
 #if !defined(OS_IS_WIN32)
-        (f = pa_fopen_cloexec("/etc/machine-id", "r")) ||
-        (f = pa_fopen_cloexec("/var/lib/dbus/machine-id", "r"))
+        (f = pa_fopen_cloexec("/data/data/com.termux/files/usr/etc/machine-id", "r")) ||
+        (f = pa_fopen_cloexec("/data/data/com.termux/files/usr/var/lib/dbus/machine-id", "r"))
 #else
         false
 #endif
@@ -3595,7 +3595,7 @@
         pa_is_path_absolute(t))
         return t;
 
-    return "/tmp";
+    return "/data/data/com.termux/files/usr/tmp";
 }
 
 int pa_open_cloexec(const char *fn, int flags, mode_t mode) {
diff -uNr 32-pulseaudio/src/pulsecore/esound.h 32-pulseaudio.mod/src/pulsecore/esound.h
--- 32-pulseaudio/src/pulsecore/esound.h	2024-03-30 22:05:41.637739841 -0300
+++ 32-pulseaudio.mod/src/pulsecore/esound.h	2024-03-30 22:06:12.457739118 -0300
@@ -23,8 +23,8 @@
 /* Most of the following is blatantly stolen from esound. */
 
 /* path and name of the default EsounD domain socket */
-#define ESD_UNIX_SOCKET_DIR     "/tmp/.esd"
-#define ESD_UNIX_SOCKET_NAME    "/tmp/.esd/socket"
+#define ESD_UNIX_SOCKET_DIR     "/data/data/com.termux/files/usr/tmp/.esd"
+#define ESD_UNIX_SOCKET_NAME    "/data/data/com.termux/files/usr/tmp/.esd/socket"
 
 /* length of the audio buffer size */
 #define ESD_BUF_SIZE (4 * 1024)
diff -uNr 32-pulseaudio/src/pulsecore/log.c 32-pulseaudio.mod/src/pulsecore/log.c
--- 32-pulseaudio/src/pulsecore/log.c	2024-03-30 22:05:41.641073175 -0300
+++ 32-pulseaudio.mod/src/pulsecore/log.c	2024-03-30 22:06:11.944405796 -0300
@@ -30,6 +30,10 @@
 #include <fcntl.h>
 #include <sys/stat.h>
 
+#ifdef __ANDROID__
+#undef HAVE_EXECINFO_H
+#endif
+
 #ifdef HAVE_EXECINFO_H
 #include <execinfo.h>
 #endif
diff -uNr 32-pulseaudio/src/pulsecore/meson.build 32-pulseaudio.mod/src/pulsecore/meson.build
--- 32-pulseaudio/src/pulsecore/meson.build	2024-03-30 22:05:41.641073175 -0300
+++ 32-pulseaudio.mod/src/pulsecore/meson.build	2024-03-30 22:06:12.061072460 -0300
@@ -185,14 +185,7 @@
 foreach simd_kwargs : simd_variants
 
   if host_machine.cpu_family() == 'arm' and 'neon' in simd_kwargs
-    if not cc.compiles('''
-        #include <arm_neon.h>
-        int main() {
-            return sizeof(uint8x8_t) + sizeof(int32x4_t) + sizeof(float32x4_t);
-        }
-        ''', name : 'neon code')
-      continue
-    endif
+    continue
   endif
 
   libpulsecore_simd = simd.check('libpulsecore_simd',
diff -uNr 32-pulseaudio/src/pulsecore/shm.c 32-pulseaudio.mod/src/pulsecore/shm.c
--- 32-pulseaudio/src/pulsecore/shm.c	2024-03-30 22:05:41.651073174 -0300
+++ 32-pulseaudio.mod/src/pulsecore/shm.c	2024-03-30 22:06:12.384405786 -0300
@@ -67,7 +67,7 @@
 /* On Linux we know that the shared memory blocks are files in
  * /dev/shm. We can use that information to list all blocks and
  * cleanup unused ones */
-#define SHM_PATH "/dev/shm/"
+#define SHM_PATH "/data/data/com.termux/files/usr/tmp/"
 #define SHM_ID_LEN 10
 #elif defined(__sun)
 #define SHM_PATH "/tmp"
diff -uNr 32-pulseaudio/src/tests/meson.build 32-pulseaudio.mod/src/tests/meson.build
--- 32-pulseaudio/src/tests/meson.build	2024-03-30 22:05:41.657739841 -0300
+++ 32-pulseaudio.mod/src/tests/meson.build	2024-03-30 22:06:13.931072416 -0300
@@ -106,8 +106,6 @@
     default_tests += [
       [ 'sigbus-test', 'sigbus-test.c',
         [ check_dep, libpulse_dep, libpulsecommon_dep, libpulsecore_dep ] ],
-      [ 'usergroup-test', 'usergroup-test.c',
-        [ check_dep, libpulse_dep, libpulsecommon_dep, libpulsecore_dep ] ],
     ]
   endif
 
